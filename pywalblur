#!/bin/python3

import os
import argparse
from ewmh import EWMH
from time import sleep
import sys
import shutil
import shlex
import subprocess
import signal
import codecs
from Xlib.display import Display

ewmh = EWMH()

def getWindowOnActiveDesktop():
    window_number = 0
    active_desktop = ewmh.getCurrentDesktop()
    windows = ewmh.getClientList()
    for window in windows:
        if ewmh.getWmDesktop(window) == active_desktop:
            window_number += 1
    return window_number

def xwinwrap_gif(width, height, path):
    return f"xwinwrap -ov -g {width}x{height}+0+0 -- mpv -wid WID {path} --no-osc --no-osd-bar --loop-file --player-operation-mode=cplayer --no-audio --panscan=1.0 --no-input-default-bindings"


def hsetroot_bg(path):
    return shlex.split(f"hsetroot -cover {path}")

def feh_bg(path):
    return shlex.split(f"feh --bg-fill {path}")

def convert_img(src, dest, blur):
    if not blur:
        return f"convert {src} {dest}"
    else:
        return f"convert -scale 10% -blur 0x{blur} -resize 1000% {src} {dest}"

def delete_wallpaper_cache(arg):
    filename = os.path.splitext(os.path.basename(arg))[0]
    if os.path.exists(const_cachedir + "/" + filename):
        print("Remove \'%s\' cache ? [Y/N] " % (filename), end='')
        if input().upper() == "Y":
            shutil.rmtree(const_cachedir + "/" + filename)
            print("Removed cache for \'%s\'" % (filename))
        else:
            print("Aborting.")
            exit(0)
    else:
        print("No cache found for \'%s\'" % (filename))
        exit(0)

def remove_all_cache():
    print("Remove all cached wallpaper ? [Y/N] ",end='')
    if input().upper() == "Y":
        print("Removed cache")
        shutil.rmtree(const_cachedir)
        os.mkdir(const_cachedir)
    else:
        print("Aborting.")

def create_cache_all(arg, quiet):
    print("WARNING THIS MAY TAKE SOME TIME...\n" if not args.quiet else '', end='')
    files = os.listdir(arg)
    length = len(files)
    for i, file in enumerate(files, 1):
        print("file %d/%d" %(i, length))
        create_cache(arg + file)
    print("Finished processing %s\n" %(arg) if not args.quiet else '', end='')

def limits_refresh(arg):
    try:
        f = float(arg)
    except ValueError:
        raise argparse.ArgumentTypeError("Must be a floating point number")
    if f < 0 or f > 1:
        raise argparse.ArgumentTypeError("Argument must be 0 > [val] < 1 ")
    return f

# Parser


def get_file_extention(filepath):
    return os.path.splitext(os.path.basename(filepath))[1]


def create_cache_gif(filepath, filename):
    if os.path.exists(const_cachedir + "/" + filename):
        print("Cache for \'%s\' aleready exist\n" % (const_cachedir + "/" + filename) if not args.quiet else '', end='')
        return
    else:
        os.mkdir(const_cachedir + "/" + filename)
        print("Generating cache for %s\n" % (filepath) if not args.quiet else '', end='')
        subprocess.Popen(["convert", "-blur", "0x4", filepath, const_cachedir + "/" + filename + "/" + filename + "blur.gif"])
        print("Finished generating cache for %s\n" % (filepath) if not args.quiet else '', end='')


def create_cache_non_gif(filepath, filename):
    blur_step = ["2", "5", "8", "10"]
    print("Generating cache for %s\n" % (filepath) if not args.quiet else '', end='')
    if os.path.exists(const_cachedir + "/" + filename):
        print("Cache for \'%s\' aleready exist\n" % (const_cachedir + "/" + filename) if not args.quiet else '', end='')
        return
    else:
        os.mkdir(const_cachedir + "/" + filename)
        print("generating frame 0/5...\n" if not args.quiet else '', end='')
        subprocess.Popen(["convert", filepath, const_cachedir + "/" + filename + "/" + filename + "0" + ".png"], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        for i in range(1, 5):
            print("generating frame %d/5..." % (i) if not args.quiet else '', end='')
            subprocess.Popen(["convert", "-blur", "0x" + blur_step[i - 1], filepath, const_cachedir + "/" + filename + "/" + filename + str(i) + ".png"], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        print("generating frame 5/5...\n" if not args.quiet else '', end='')
        subprocess.Popen(["convert", "-scale", "10%", "-blur", "0x2", "-resize", "1000%", filepath, const_cachedir + "/" + filename + "/" + filename + "5.png"], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    print("Finished generating cache for %s\n" % (filepath) if not args.quiet else '', end='')

def create_cache(filepath):
    filename = os.path.splitext(os.path.basename(filepath))
    if filename[1] != ".gif":
        create_cache_non_gif(filepath, filename[0])
    else:
        create_cache_gif(filepath, filename[0])

def anim_blur_w(walls_path, wallpaper_path, animation):
    if not animation:
        subprocess.Popen(feh_bg(os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + "5.png")), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    else:
        for i in range(0, 6):
            subprocess.Popen(feh_bg(os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + str(i) + ".png")), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
            sleep(.150)

def anim_unblur_w(walls_path, wallpaper_path, animation):
    if not animation:
        subprocess.Popen(feh_bg(os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + "0.png")), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    else:
        for i in range(5, -1, -1):
            subprocess.Popen(feh_bg(os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + str(i) + ".png")), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
            sleep(.150)

def loop_blur_w(wallpaper_path, sleeptime, animation):
    blured = False
    walls_path = os.path.join(const_cachedir, os.path.splitext(os.path.basename(wallpaper_path))[0])
    subprocess.Popen(feh_bg(os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + "0.png")), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    while True:
        window_open = getWindowOnActiveDesktop()
        if window_open:
            if not blured:
                anim_blur_w(walls_path, wallpaper_path, animation)
                blured = True
        else:
            if blured:
                anim_unblur_w(walls_path, wallpaper_path, animation)
                blured = False
        sleep(sleeptime)

def loop_blur_g(wallpaper_path, sleeptime, animation):
    blured = False
    walls_path = os.path.join(const_cachedir, os.path.splitext(os.path.basename(wallpaper_path))[0])
    proc = subprocess.Popen(xwinwrap_gif(width, height, wallpaper_path), shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    if animation:
        proc.kill()
        proc = subprocess.Popen(xwinwrap_gif(width, height, wallpaper_path), shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        exit(0)
    while True:
        window_open = getWindowOnActiveDesktop()
        if window_open:
            if not blured:
                proc.kill() if proc != None else 0
                proc = subprocess.Popen(xwinwrap_gif(width, height, os.path.join(walls_path, os.path.splitext(os.path.basename(wallpaper_path))[0] + "blur.gif")), shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                blured = True
        else:
            if blured:
                proc.kill() if proc != None else 0
                proc = subprocess.Popen(xwinwrap_gif(width, height, wallpaper_path), shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                blured = False
        sleep(sleeptime)

def loop_blur(wallpaper_path, sleeptime, animation, extention):
    if extention != ".gif":
        loop_blur_w(wallpaper_path, sleeptime, animation)
    else:
        loop_blur_g(wallpaper_path, sleeptime, animation)

const_cachedir = os.path.join(os.getenv("HOME"), ".cache/pywalblur")

print()
if __name__ == "__main__":
    if len(sys.argv[1:]) == 0:
        parser.print_usage()
        parser.exit()
    # Parser
    parser = argparse.ArgumentParser(description="Blur wallpaper on window open.")
    parser.add_argument('-s', '--refresh-rate', type=limits_refresh, metavar='', default=0.3, help="interval of check")
    parser.add_argument('-q', '--quiet', action='store_true', help="no print")
    parser.add_argument('-a', '--animation', action='store_true', help="add 'animation' (experimental) / deactivate blur on gifs")
    bluring_grp = parser.add_mutually_exclusive_group()
    bluring_grp.add_argument('-c', '--create-cache', type=str, metavar='',default=None, help="create cleacache without launching")
    bluring_grp.add_argument('-C', '--create-cache-dir', type=str, metavar='', help="create cache for every file in dit")
    bluring_grp.add_argument('-w', '--wallpaper', type=str, default=None, metavar='', help="wallpaper path(gif still experimental)")
    bluring_grp.add_argument('-r', '--remove', type=delete_wallpaper_cache, metavar='', help="remove cached wallpaper corresponding to path")
    bluring_grp.add_argument('-R', '--remove-all', action='store_true', help="remove all cached wallpaper")
    args = parser.parse_args()
    if not os.path.exists(const_cachedir):
        os.mkdir(const_cachedir)
        print("Created cache directory in \'%s\'\n" % (const_cachedir) if not args.quiet else '', end='')
    if args.remove_all:
        remove_all_cache()
        exit(0)
    if args.create_cache != None:
        create_cache(args.create_cache)
        exit(0)
    if args.create_cache_dir != None:
        create_cache_all(args.create_cache_dir, args.quiet)
    if args.wallpaper != None:
        # get screen resolution
        screen = Display(':0').screen()
        width = screen.width_in_pixels
        height = screen.height_in_pixels
        create_cache(args.wallpaper)
        loop_blur(args.wallpaper, args.refresh_rate, args.animation, get_file_extention(args.wallpaper))
    else:
        exit(0)